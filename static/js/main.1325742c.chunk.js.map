{"version":3,"sources":["recognition.js","App.js","serviceWorker.js","index.js"],"names":["setup","_ref","interimCallback","finalCallback","endCallback","_ref$continuous","continuous","_ref$log","log","recognition","webkitSpeechRecognition","lang","interimResults","onresult","event","i","resultIndex","results","length","res","transcript","isFinal","console","buildResultParser","onstart","buildStartListener","onend","buildEndNotify","App","recorder","state","recording","final_transcript","interim_transcript","onRecord","_this","stop","setState","start","onFinal","onInterim","onEnd","this","_this$state","react_default","a","createElement","className","disabled","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAsCaA,SAAQ,SAAAC,GAMf,IALFC,EAKED,EALFC,gBACAC,EAIEF,EAJFE,cACAC,EAGEH,EAHFG,YAGEC,EAAAJ,EAFFK,kBAEE,IAAAD,KAAAE,EAAAN,EADFO,WACE,IAAAD,KACIE,EAAc,IAAIC,wBAOxB,OANAD,EAAYE,KAAO,QACnBF,EAAYH,WAAaA,EACzBG,EAAYG,eAA4C,oBAApBV,EACpCO,EAAYI,SA/BU,SAACX,EAAiBC,EAAeG,EAAYE,GAA7C,OAAqD,SAACM,GAG5E,IAAK,IAAIC,EAAID,EAAME,YAAaD,EAAID,EAAMG,QAAQC,OAAQH,IAAK,CAC3D,IAAMI,EAAML,EAAMG,QAAQF,GACpBK,EAAaD,EAAI,GAAKA,EAAI,GAAGC,WAAa,GAC3CA,IAGDD,EAAIE,SACJlB,EAAciB,GACVd,GAAcE,GACdc,QAAQd,IAAI,oCAGhBN,EAAgBkB,MAgBDG,CAAkBrB,EAAiBC,EAAeG,GACzEG,EAAYe,QA/CW,SAAClB,EAAYE,GAAb,OAAqB,WACxCA,GACAc,QAAQd,IAAI,wBAA0BF,EAAa,gBAAkB,MA6CnDmB,CAAmBnB,EAAYE,GACrDC,EAAYiB,MA1CO,SAACtB,EAAaI,GAAd,OAAsB,WACd,oBAAhBJ,GACPA,IAEAI,GACAc,QAAQd,IAAI,qEAqCImB,CAAevB,EAAaI,GACzCC,ICiBImB,6MA/DXC,SAAW,OAUXC,MAAQ,CACJC,WAAW,EACXC,iBAAkB,GAClBC,mBAAoB,MAExBC,SAAW,WACeC,EAAKL,MAAnBC,WAEJI,EAAKN,SAASO,OACdD,EAAKE,SAAS,CAAEN,WAAW,MAE3BI,EAAKN,SAASS,QACdH,EAAKE,SAAS,CAAEN,WAAW,QAGnCQ,QAAU,SAACP,GACPG,EAAKE,SAAS,CAAEL,mBAAkBC,mBAAoB,QAE1DO,UAAY,SAACP,GACTE,EAAKE,SAAS,CAAEJ,qBAAoBD,iBAAkB,QAE1DS,MAAQ,WACJN,EAAKE,SAAS,CAAEN,WAAW,wFA9B3BW,KAAKb,SAAW7B,EAAM,CAClBG,cAAeuC,KAAKH,QACpBrC,gBAAiBwC,KAAKF,UACtBpC,YAAasC,KAAKD,yCA6BjB,IAEDP,EAMAQ,KANAR,SAFCS,EAQDD,KALAZ,MACIC,EAJHY,EAIGZ,UACAC,EALHW,EAKGX,iBACAC,EANHU,EAMGV,mBAGR,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQE,SAAUjB,EAAWkB,KAAK,SAASC,QAAShB,EAAUa,UAAU,UACrEhB,EAAY,eAAiB,aAE5BE,KAAwBD,IAC1BY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZd,GAEHW,EAAAC,EAAAC,cAAA,WACGd,YAvDHmB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1325742c.chunk.js","sourcesContent":["// Only works in Chrome!!!\n/* global webkitSpeechRecognition */\n\nconst buildStartListener = (continuous, log) => () => {\n    if (log) {\n        console.log('Listening for speech' + (continuous ? ' continuously' : ''));\n    }\n}\n\nconst buildEndNotify = (endCallback, log) => () => {\n    if (typeof endCallback === 'function') {\n        endCallback();\n    }\n    if (log) {\n        console.log('Done listening for speech, call start() to start listening again');\n    }\n}\n\nconst buildResultParser = (interimCallback, finalCallback, continuous, log) => (event) => {\n    // results will store past results in the same recognition, \n    // make sure we're only working with results from the latest recogntion\n    for (let i = event.resultIndex; i < event.results.length; i++) {\n        const res = event.results[i];\n        const transcript = res[0] ? res[0].transcript : '';\n        if (!transcript) {\n            continue;\n        }\n        if (res.isFinal) {\n            finalCallback(transcript);\n            if (continuous && log) {\n                console.log('Still listening for next speech');\n            }\n        } else {\n            interimCallback(transcript);\n        }\n    }\n}\n\nexport const setup = ({\n    interimCallback,\n    finalCallback,\n    endCallback,\n    continuous = false,\n    log = false,\n}) => {\n    const recognition = new webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.continuous = continuous;\n    recognition.interimResults = typeof interimCallback === 'function';\n    recognition.onresult = buildResultParser(interimCallback, finalCallback, continuous);\n    recognition.onstart = buildStartListener(continuous, log);\n    recognition.onend = buildEndNotify(endCallback, log);\n    return recognition;\n}","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { setup } from './recognition.js';\n\nclass App extends Component {\n    recorder = null;\n    componentDidMount() {\n        this.recorder = setup({\n            finalCallback: this.onFinal,\n            interimCallback: this.onInterim,\n            endCallback: this.onEnd,\n            // log: true,\n            // continuous: true,\n        });\n    }\n    state = {\n        recording: false,\n        final_transcript: '',\n        interim_transcript: '',\n    };\n    onRecord = () => {\n        const { recording } = this.state;\n        if (recording) {\n            this.recorder.stop();\n            this.setState({ recording: false });\n        } else {\n            this.recorder.start();\n            this.setState({ recording: true });\n        }\n    }\n    onFinal = (final_transcript) => {\n        this.setState({ final_transcript, interim_transcript: '' });\n    }\n    onInterim = (interim_transcript) => {\n        this.setState({ interim_transcript, final_transcript: '' });\n    }\n    onEnd = () => {\n        this.setState({ recording: false });\n    }\n    render() {\n        const {\n            onRecord,\n            state: {\n                recording,\n                final_transcript,\n                interim_transcript\n            },\n        } = this;\n        return (\n            <div className=\"container\">\n              <button disabled={recording} type=\"button\" onClick={onRecord} className=\"button\" >\n                {recording ? 'Recording...' : 'Record'}\n              </button>\n              {(!!interim_transcript || !!final_transcript) &&\n                <div className=\"speech-bubble output\">\n                  <div className=\"muted\">\n                    {interim_transcript}\n                  </div>\n                  <div>\n                    {final_transcript}\n                  </div>\n                </div>\n              }\n          </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}